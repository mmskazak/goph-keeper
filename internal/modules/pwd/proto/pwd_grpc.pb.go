// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: pwd.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PasswordService_SavePassword_FullMethodName    = "/pwd.PasswordService/SavePassword"
	PasswordService_UpdatePassword_FullMethodName  = "/pwd.PasswordService/UpdatePassword"
	PasswordService_DeletePassword_FullMethodName  = "/pwd.PasswordService/DeletePassword"
	PasswordService_GetPassword_FullMethodName     = "/pwd.PasswordService/GetPassword"
	PasswordService_GetAllPasswords_FullMethodName = "/pwd.PasswordService/GetAllPasswords"
)

// PasswordServiceClient is the client API for PasswordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для работы с паролями
type PasswordServiceClient interface {
	SavePassword(ctx context.Context, in *SavePwdRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	UpdatePassword(ctx context.Context, in *UpdatePwdRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	DeletePassword(ctx context.Context, in *DeletePwdRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	GetPassword(ctx context.Context, in *GetPwdRequest, opts ...grpc.CallOption) (*PwdResponse, error)
	GetAllPasswords(ctx context.Context, in *AllPwdRequest, opts ...grpc.CallOption) (*AllPwdResponse, error)
}

type passwordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPasswordServiceClient(cc grpc.ClientConnInterface) PasswordServiceClient {
	return &passwordServiceClient{cc}
}

func (c *passwordServiceClient) SavePassword(ctx context.Context, in *SavePwdRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, PasswordService_SavePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordServiceClient) UpdatePassword(ctx context.Context, in *UpdatePwdRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, PasswordService_UpdatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordServiceClient) DeletePassword(ctx context.Context, in *DeletePwdRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, PasswordService_DeletePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordServiceClient) GetPassword(ctx context.Context, in *GetPwdRequest, opts ...grpc.CallOption) (*PwdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PwdResponse)
	err := c.cc.Invoke(ctx, PasswordService_GetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordServiceClient) GetAllPasswords(ctx context.Context, in *AllPwdRequest, opts ...grpc.CallOption) (*AllPwdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllPwdResponse)
	err := c.cc.Invoke(ctx, PasswordService_GetAllPasswords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasswordServiceServer is the server API for PasswordService service.
// All implementations must embed UnimplementedPasswordServiceServer
// for forward compatibility.
//
// Сервис для работы с паролями
type PasswordServiceServer interface {
	SavePassword(context.Context, *SavePwdRequest) (*BasicResponse, error)
	UpdatePassword(context.Context, *UpdatePwdRequest) (*BasicResponse, error)
	DeletePassword(context.Context, *DeletePwdRequest) (*BasicResponse, error)
	GetPassword(context.Context, *GetPwdRequest) (*PwdResponse, error)
	GetAllPasswords(context.Context, *AllPwdRequest) (*AllPwdResponse, error)
	mustEmbedUnimplementedPasswordServiceServer()
}

// UnimplementedPasswordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPasswordServiceServer struct{}

func (UnimplementedPasswordServiceServer) SavePassword(context.Context, *SavePwdRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePassword not implemented")
}
func (UnimplementedPasswordServiceServer) UpdatePassword(context.Context, *UpdatePwdRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedPasswordServiceServer) DeletePassword(context.Context, *DeletePwdRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePassword not implemented")
}
func (UnimplementedPasswordServiceServer) GetPassword(context.Context, *GetPwdRequest) (*PwdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}
func (UnimplementedPasswordServiceServer) GetAllPasswords(context.Context, *AllPwdRequest) (*AllPwdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPasswords not implemented")
}
func (UnimplementedPasswordServiceServer) mustEmbedUnimplementedPasswordServiceServer() {}
func (UnimplementedPasswordServiceServer) testEmbeddedByValue()                         {}

// UnsafePasswordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PasswordServiceServer will
// result in compilation errors.
type UnsafePasswordServiceServer interface {
	mustEmbedUnimplementedPasswordServiceServer()
}

func RegisterPasswordServiceServer(s grpc.ServiceRegistrar, srv PasswordServiceServer) {
	// If the following call pancis, it indicates UnimplementedPasswordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PasswordService_ServiceDesc, srv)
}

func _PasswordService_SavePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServiceServer).SavePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordService_SavePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServiceServer).SavePassword(ctx, req.(*SavePwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordService_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServiceServer).UpdatePassword(ctx, req.(*UpdatePwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordService_DeletePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServiceServer).DeletePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordService_DeletePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServiceServer).DeletePassword(ctx, req.(*DeletePwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordService_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServiceServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordService_GetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServiceServer).GetPassword(ctx, req.(*GetPwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordService_GetAllPasswords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllPwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServiceServer).GetAllPasswords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordService_GetAllPasswords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServiceServer).GetAllPasswords(ctx, req.(*AllPwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PasswordService_ServiceDesc is the grpc.ServiceDesc for PasswordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PasswordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pwd.PasswordService",
	HandlerType: (*PasswordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SavePassword",
			Handler:    _PasswordService_SavePassword_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _PasswordService_UpdatePassword_Handler,
		},
		{
			MethodName: "DeletePassword",
			Handler:    _PasswordService_DeletePassword_Handler,
		},
		{
			MethodName: "GetPassword",
			Handler:    _PasswordService_GetPassword_Handler,
		},
		{
			MethodName: "GetAllPasswords",
			Handler:    _PasswordService_GetAllPasswords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pwd.proto",
}
